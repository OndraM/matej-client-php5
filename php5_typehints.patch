diff --git b/src/Model/Command/Interaction.php a/src/Model/Command/Interaction.php
index 7a606b3..1578502 100644
--- b/src/Model/Command/Interaction.php
+++ a/src/Model/Command/Interaction.php
@@ -135,8 +135,12 @@ class Interaction extends AbstractCommand implements UserAwareInterface
         $this->itemId = $itemId;
     }

+    /**
+     * @param float $value
+     */
     protected function setValue($value)
     {
+        Assertion::float($value);
         Assertion::between($value, 0, 1);
         $this->value = $value;
     }
@@ -147,8 +151,12 @@ class Interaction extends AbstractCommand implements UserAwareInterface
         $this->context = $context;
     }

+    /**
+     * @param int $timestamp
+     */
     protected function setTimestamp($timestamp)
     {
+        Assertion::integer($timestamp);
         Assertion::greaterThan($timestamp, 0);
         $this->timestamp = $timestamp;
     }
diff --git b/src/Model/Command/UserRecommendation.php a/src/Model/Command/UserRecommendation.php
index 8b4f50f..59e98a1 100644
--- b/src/Model/Command/UserRecommendation.php
+++ a/src/Model/Command/UserRecommendation.php
@@ -124,8 +124,12 @@ class UserRecommendation extends AbstractCommand implements UserAwareInterface
         $this->userId = $userId;
     }

+    /**
+     * @param int $count
+     */
     protected function setCount($count)
     {
+        Assertion::integer($count);
         Assertion::greaterThan($count, 0);
         $this->count = $count;
     }
@@ -136,14 +140,22 @@ class UserRecommendation extends AbstractCommand implements UserAwareInterface
         $this->scenario = $scenario;
     }

+    /**
+     * @param float $rotationRate
+     */
     protected function setRotationRate($rotationRate)
     {
+        Assertion::float($rotationRate);
         Assertion::between($rotationRate, 0, 1);
         $this->rotationRate = $rotationRate;
     }

+    /**
+     * @param int $rotationTime
+     */
     protected function setRotationTime($rotationTime)
     {
+        Assertion::integer($rotationTime);
         Assertion::greaterOrEqualThan($rotationTime, 0);
         $this->rotationTime = $rotationTime;
     }
diff --git b/src/RequestBuilder/RequestBuilderFactory.php a/src/RequestBuilder/RequestBuilderFactory.php
index f410a97..2f6ccf2 100644
--- a/src/RequestBuilder/RequestBuilderFactory.php
+++ b/src/RequestBuilder/RequestBuilderFactory.php
@@ -29,6 +29,8 @@ class RequestBuilderFactory

     /**
      * Define new properties into the database. Those properties will be created and subsequently accepted by Matej.
+     *
+     * @return ItemPropertiesSetupRequestBuilder
      */
     public function setupItemProperties()
     {
@@ -41,6 +43,8 @@ class RequestBuilderFactory
     /**
      * Added item properties will be IRREVERSIBLY removed from all items in the database and the item property will
      * from now be rejected by Matej.
+     *
+     * @return ItemPropertiesSetupRequestBuilder
      */
     public function deleteItemProperties()
     {
@@ -50,6 +54,9 @@ class RequestBuilderFactory
         return $requestBuilder;
     }

+    /**
+     * @return EventsRequestBuilder
+     */
     public function events()
     {
         $requestBuilder = new EventsRequestBuilder();
@@ -58,6 +65,9 @@ class RequestBuilderFactory
         return $requestBuilder;
     }

+    /**
+     * @return CampaignRequestBuilder
+     */
     public function campaign()
     {
         $requestBuilder = new CampaignRequestBuilder();
@@ -66,6 +76,10 @@ class RequestBuilderFactory
         return $requestBuilder;
     }

+    /**
+     * @param Sorting $sorting
+     * @return SortingRequestBuilder
+     */
     public function sorting(Sorting $sorting)
     {
         $requestBuilder = new SortingRequestBuilder($sorting);
@@ -74,6 +88,10 @@ class RequestBuilderFactory
         return $requestBuilder;
     }

+    /**
+     * @param UserRecommendation $recommendation
+     * @return RecommendationRequestBuilder
+     */
     public function recommendation(UserRecommendation $recommendation)
     {
         $requestBuilder = new RecommendationRequestBuilder($recommendation);
@@ -82,6 +100,9 @@ class RequestBuilderFactory
         return $requestBuilder;
     }

+    /**
+     * @return ForgetRequestBuilder
+     */
     public function forget()
     {
         $requestBuilder = new ForgetRequestBuilder();
@@ -90,6 +111,9 @@ class RequestBuilderFactory
         return $requestBuilder;
     }

+    /**
+     * @return ResetDatabaseRequestBuilder
+     */
     public function resetDatabase()
     {
         $requestBuilder = new ResetDatabaseRequestBuilder();
